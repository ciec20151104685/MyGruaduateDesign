<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.persistence.dao.BorrowBookMapper">
  <resultMap id="BaseResultMap" type="com.persistence.entity.BorrowBook">
    <id column="StudentId" jdbcType="INTEGER" property="studentid" />
    <result column="bookId" jdbcType="INTEGER" property="bookid" />
    <result column="Borrowdata" jdbcType="TIMESTAMP" property="borrowdata" />
    <result column="Returndata" jdbcType="TIMESTAMP" property="returndata" />
    <result column="ExceptreturnTime" jdbcType="TIMESTAMP" property="exceptreturntime" />
    <result column="Overdata" jdbcType="INTEGER" property="overdata" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    StudentId, bookId, Borrowdata, Returndata, ExceptreturnTime, Overdata
  </sql>
  <select id="selectByExample" parameterType="com.persistence.entity.BorrowBookExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from borrowbook
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from borrowbook
    where StudentId = #{studentid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from borrowbook
    where StudentId = #{studentid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.persistence.entity.BorrowBookExample">
    delete from borrowbook
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.persistence.entity.BorrowBook">
    insert into borrowbook (StudentId, bookId, Borrowdata, 
      Returndata, ExceptreturnTime, Overdata
      )
    values (#{studentid,jdbcType=INTEGER}, #{bookid,jdbcType=INTEGER}, #{borrowdata,jdbcType=TIMESTAMP}, 
      #{returndata,jdbcType=TIMESTAMP}, #{exceptreturntime,jdbcType=TIMESTAMP}, #{overdata,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.persistence.entity.BorrowBook">
    insert into borrowbook
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        StudentId,
      </if>
      <if test="bookid != null">
        bookId,
      </if>
      <if test="borrowdata != null">
        Borrowdata,
      </if>
      <if test="returndata != null">
        Returndata,
      </if>
      <if test="exceptreturntime != null">
        ExceptreturnTime,
      </if>
      <if test="overdata != null">
        Overdata,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        #{studentid,jdbcType=INTEGER},
      </if>
      <if test="bookid != null">
        #{bookid,jdbcType=INTEGER},
      </if>
      <if test="borrowdata != null">
        #{borrowdata,jdbcType=TIMESTAMP},
      </if>
      <if test="returndata != null">
        #{returndata,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptreturntime != null">
        #{exceptreturntime,jdbcType=TIMESTAMP},
      </if>
      <if test="overdata != null">
        #{overdata,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update borrowbook
    <set>
      <if test="record.studentid != null">
        StudentId = #{record.studentid,jdbcType=INTEGER},
      </if>
      <if test="record.bookid != null">
        bookId = #{record.bookid,jdbcType=INTEGER},
      </if>
      <if test="record.borrowdata != null">
        Borrowdata = #{record.borrowdata,jdbcType=TIMESTAMP},
      </if>
      <if test="record.returndata != null">
        Returndata = #{record.returndata,jdbcType=TIMESTAMP},
      </if>
      <if test="record.exceptreturntime != null">
        ExceptreturnTime = #{record.exceptreturntime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.overdata != null">
        Overdata = #{record.overdata,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update borrowbook
    set StudentId = #{record.studentid,jdbcType=INTEGER},
      bookId = #{record.bookid,jdbcType=INTEGER},
      Borrowdata = #{record.borrowdata,jdbcType=TIMESTAMP},
      Returndata = #{record.returndata,jdbcType=TIMESTAMP},
      ExceptreturnTime = #{record.exceptreturntime,jdbcType=TIMESTAMP},
      Overdata = #{record.overdata,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.persistence.entity.BorrowBook">
    update borrowbook
    <set>
      <if test="bookid != null">
        bookId = #{bookid,jdbcType=INTEGER},
      </if>
      <if test="borrowdata != null">
        Borrowdata = #{borrowdata,jdbcType=TIMESTAMP},
      </if>
      <if test="returndata != null">
        Returndata = #{returndata,jdbcType=TIMESTAMP},
      </if>
      <if test="exceptreturntime != null">
        ExceptreturnTime = #{exceptreturntime,jdbcType=TIMESTAMP},
      </if>
      <if test="overdata != null">
        Overdata = #{overdata,jdbcType=INTEGER},
      </if>
    </set>
    where StudentId = #{studentid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.persistence.entity.BorrowBook">
    update borrowbook
    set bookId = #{bookid,jdbcType=INTEGER},
      Borrowdata = #{borrowdata,jdbcType=TIMESTAMP},
      Returndata = #{returndata,jdbcType=TIMESTAMP},
      ExceptreturnTime = #{exceptreturntime,jdbcType=TIMESTAMP},
      Overdata = #{overdata,jdbcType=INTEGER}
    where StudentId = #{studentid,jdbcType=INTEGER}
  </update>
</mapper>